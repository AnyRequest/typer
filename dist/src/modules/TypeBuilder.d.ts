import type { HTMLTypozElement, Options, Parser, RecursivePartial } from '..';
type Task = () => void | Promise<number>;
export default class TypeBuilder {
    static instance(parser: Parser): TypeBuilder;
    static id: number;
    private parser;
    id: number;
    name: string;
    config: Options;
    typeNode: HTMLTypozElement;
    taskQueue: (() => (void | number) | Promise<void | number>)[];
    pointer: number;
    content: any[];
    constructor(parser: Parser);
    private wait;
    select(select: string): this;
    conf(config?: RecursivePartial<Options>): this;
    getCurrentRenderContentLength(): number;
    cursorUpdate(value: number): void;
    pause(sec: number): this;
    commonWrite(letter: string): void;
    addplace(point: number, word: string): this;
    replace(point: number, word: string): this;
    write(word: string, speed?: number): this;
    erase(value?: number, speed?: number): this;
    allErase(speed?: number): this;
    move(value: number, speed?: number): this;
    addTask(task: Task): void;
    run(): Promise<void>;
    renderContent(): void;
}
export {};
